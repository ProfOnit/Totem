{"version":3,"sources":["config.js","phaser/scenes/gameScene.js","phaser/game.js"],"names":["mapConfig","tileSizeX","tileSizeY","nbTileX","nbTileY","frameRatePlayerAnimation","map","gameScene","key","secs","anims","create","frameRate","frames","generateFrameNames","start","end","x","player","y","keyboard","Z","isDown","layers","data","Math","round","index","play","S","Q","D","scale","resize","load","image","spritesheet","frameWidth","frameHeight","tilemapCSV","make","tilemap","tileWidth","tileHeight","console","log","tileset","addTilesetImage","add","createStaticLayer","input","addKeys","sprite","animation","movementManager","timer","time","addEvent","delay","callback","thick","callbackScope","loop","Phaser","Scene","gameConfig","widght","height","parent","type","AUTO","scene","physics","default","game","Game"],"mappings":"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","file":"game.e212df45.js","sourceRoot":"..","sourcesContent":["export const mapConfig = {\n    tileSizeX: 64,\n    tileSizeY: 46,\n    nbTileX: 24,\n    nbTileY: 16\n}\n\nexport const frameRatePlayerAnimation = 5;","import { mapConfig, frameRatePlayerAnimation } from '../../config'\nvar map;\nexport class gameScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: \"Game\",\n        });\n        this.map = null;\n        this.secs = 1;\n    }\n\n    animation() {\n        this.anims.create({\n            key: 'down',\n            frameRate: frameRatePlayerAnimation,\n            frames: this.anims.generateFrameNames('player', {start: 0, end: 3})\n        });\n        this.anims.create({\n            key: 'right',\n            frameRate: frameRatePlayerAnimation,\n            frames: this.anims.generateFrameNames('player', {start: 4, end: 7})\n        });\n        this.anims.create({\n            key: 'left',\n            frameRate: frameRatePlayerAnimation,\n            frames: this.anims.generateFrameNames('player', {start: 8, end: 11})\n        });\n        this.anims.create({\n            key: 'up',\n            frameRate: frameRatePlayerAnimation,\n            frames: this.anims.generateFrameNames('player', {start: 12, end: 16})\n        });\n    }\n\n    movementManager() {\n        let x = this.player.x;\n        let y = this.player.y;\n        if (this.keyboard.Z.isDown && this.player.y - mapConfig.tileSizeY  > -mapConfig.tileSizeY &&\n            map.layers[0].data[Math.round(this.player.y / mapConfig.tileSizeY - 0.69)][(Math.round(this.player.x / mapConfig.tileSizeX - 0.69))].index != -1) {\n            //console.log();\n            y -= mapConfig.tileSizeY;\n            this.player.play(\"up\");\n        }\n        if (this.keyboard.S.isDown && this.player.y + mapConfig.tileSizeY < mapConfig.tileSizeY * mapConfig.nbTileY &&\n            map.layers[0].data[(Math.round(this.player.y / mapConfig.tileSizeY - 0.69) + 2)][(Math.round(this.player.x / mapConfig.tileSizeX - 0.69))].index != -1) {\n            y += mapConfig.tileSizeY;\n            this.player.play(\"down\");\n        }\n        if (this.keyboard.Q.isDown && this.player.x - mapConfig.tileSizeX > 0 &&\n            map.layers[0].data[(Math.round(this.player.y / mapConfig.tileSizeY - 0.69) + 1)][(Math.round(this.player.x / mapConfig.tileSizeX - 0.69) - 1)].index != -1) {\n            x -= mapConfig.tileSizeX;\n            this.player.play(\"left\");\n        }\n        if (this.keyboard.D.isDown && this.player.x + mapConfig.tileSizeX < mapConfig.tileSizeX * mapConfig.nbTileX &&\n            map.layers[0].data[Math.round(this.player.y / mapConfig.tileSizeY - 0.69) + 1][Math.round(this.player.x / mapConfig.tileSizeX - 0.69) + 1].index != -1) {\n            this.player.play(\"right\");\n            x += mapConfig.tileSizeX;\n        }\n        this.player.x = x;\n        this.player.y = y;\n    }\n\n    preload() {\n        this.scale.resize(1920, 1080);\n        this.load.image(\"plateform-64-46\", \"./assets/plateform-64-46.png\");\n        this.load.image(\"background\", \"./assets/canyon-background.png\");\n        this.load.spritesheet(\"player\", \"./assets/player.png\", {frameWidth: 32, frameHeight: 64});\n        this.load.tilemapCSV(\"map\", \"./assets/good.csv\");\n    }\n\n    create() {\n        map = this.make.tilemap({\n            key: \"map\",\n            tileWidth: mapConfig.tileSizeX,\n            tileHeight: mapConfig.tileSizeY\n        });\n        console.log(map.layers[0].data)\n        var tileset = map.addTilesetImage(\"plateform-64-46\", \"plateform-64-46\");\n        this.add.image(1920 / 2, 1080 / 2, \"background\");\n        map.createStaticLayer(0, tileset, 0, 0);\n        this.keyboard = this.input.keyboard.addKeys(\"Z, Q, S, D\");\n        this.player = this.add.sprite(100, 100, \"player\", 0);\n        this.player.x = 32;\n        this.player.y = 32;\n        this.animation();\n    }\n\n    thick() {\n        if (this.secs == 0) {\n            this.secs = 15;\n            this.movementManager();\n        }\n        this.secs--;\n    }\n\n    update() {\n        var timer = this.time.addEvent({\n            delay: 1000,                // ms\n            callback: this.thick(),\n            callbackScope: this,\n            loop: true\n        });\n    }\n}","\nimport { gameScene } from './scenes/gameScene'\nimport { mapConfig } from '../config'\n\nconst gameConfig = {\n    widght: mapConfig.tileSizeX * mapConfig.nbTileX,\n    height: mapConfig.tileSizeY * mapConfig.nbTileY,\n    parent: \"game-container\",\n    type: Phaser.AUTO,\n    scene: [\n        gameScene\n    ],\n    physics: {\n        default: \"arcade\"\n    }\n}\n\nvar game = new Phaser.Game(gameConfig);"]}